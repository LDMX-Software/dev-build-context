#!/bin/sh

set -o errexit
set -o nounset

error() {
  printf >&2 "\033[1;31mERROR: \033[0m\033[31m%s\033[0m\n" "$*"
}

inf() {
  printf "\033[1mINFO: \033[0m%s\n" "$*"
}

# fetch the latest release version for the input owner and repo
# https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#get-the-latest-release
# Args
#  1 : repository
# Output
#  prints the tag to stdout
fetch() {
  gh api \
    -H "Accept: application/vnd.github.json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "/repos/${1}/releases/latest" \
    --jq '.tag_name'
}

# update the test workflow with the passed runner and version
# Args:
#  1 : provide to actually apply edit, otherwise just print lines that would change
# Output:
#  Edits the ci/runners-to-test.json in place if 3 args provided,
#  otherwise just prints lines that would be edited to stdout
update() {
  latest="$(fetch LDMX-Software/ldmx-sw)"
  ci_latest="$(jq -cr '.ldmx_sw[-1]' ci/ldmx-sw-to-test.json)"
  if [ "${ci_latest}" = "${latest}" ]; then
    inf "CI ${ci_latest} and ldmx-sw ${latest} agree on latest version. No updates to be made."
    return 0
  fi
  latest_major=$(echo "${latest}" | sed 's|^v||' | cut -f 1 -d .)
  latest_minor=$(echo "${latest}" | cut -f 2 -d .)
  latest_patch=$(echo "${latest}" | cut -f 3 -d .)
  ci_latest_major=$(echo "${ci_latest}" | sed 's|^v||' | cut -f 1 -d .)
  ci_latest_minor=$(echo "${ci_latest}" | cut -f 2 -d .)
  ci_latest_patch=$(echo "${ci_latest}" | cut -f 3 -d .)
  if [ "${latest_major}" -eq "${ci_latest_major}" ] && [ "${latest_minor}" -eq "${ci_latest_minor}" ]; then
    inf "Only a patch difference between ${latest} and ${ci_latest}, replacing ${ci_latest} with ${latest}."
    jq --arg latest "${latest}" '.ldmx_sw[-1] = $latest' ci/ldmx-sw-to-test.json > ci/ldmx-sw-to-test.json.upd
  else
    inf "More than a patch difference, adding ${latest} as a new test to the CI."
    jq --arg latest "${latest}" '.ldmx_sw += [$latest]' ci/ldmx-sw-to-test.json > ci/ldmx-sw-to-test.json.upd
  fi
  if [ -z "${1}" ]; then
    diff ci/ldmx-sw-to-test.json ci/ldmx-sw-to-test.json.upd || true
    rm ci/ldmx-sw-to-test.json.upd
  else
    mv ci/ldmx-sw-to-test.json.upd ci/ldmx-sw-to-test.json
  fi
}

help() {
  cat<<\HELP

  check for new runner versions to test

 USAGE:

  ./ci/ldmx-sw-dependabot [options]

 OPTIONS
  -h, --help : print this help and exit
  --apply    : actually edit the ci/ldmx-sw-to-test.json instead of
               just printing the lines that have been changed

HELP
}

apply=""
while [ "$#" -gt "0" ]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    --apply)
      apply="APPLY"
      ;;
    *)
      help
      error "Unrecognized argument '$1'"
      exit 1
      ;;
  esac
  shift
done

update "${apply}"
