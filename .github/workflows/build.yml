
name: Build

# only build if push changes to files involved in the build
on:
  push:
    branches:
      - main
    paths: 
      - 'ldmx.sh' 
      - 'Dockerfile'
      - 'install-scripts/**'
      - '**build.yml'
  pull_request:
    branches: 
      - main
  release:

# the jobs are the different container tags that we want built
jobs:
  # basic, defaults development container
  #     this is the container that pretty much everyone in ldmx-sw should use
  basic:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    -
      name: Setup QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - 
      name: Cache Docker Layers on GitHub
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - 
      name: Get Build Context
      uses: actions/checkout@v2
    -
      name: Determine Image Tag
      id: generate_tag
      run: |
          _tag=latest
          if [ "${{ github.event_name }}" == "pull_request" ]; then
              _tag=pr-${{ github.event.number }}
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
              _tag=${GITHUB_REF#refs/tags/}
          fi
          _full=ldmx/dev:${_tag}
          echo ::set-output name=tag::${_full}
    -
      name: Build the Image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: false # don't push to docker hub yet
        load: true # allow image to be availabe to the docker program later in this job
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        tags: ${{ steps.generate_tag.outputs.tag }}
    -
      name: Pull down ldmx-sw for testing
      uses: actions/checkout@v2
      with:
        repository: LDMX-Software/ldmx-sw
        submodules: recursive
        path: ldmx-sw
    - 
      name: Test the Build Image
      run: |
          source ldmx-sw/scripts/ldmx-env.sh
          mkdir ldmx-sw/build
          cd ldmx-sw/build
          ldmx 'cmake -DBUILD_TESTS=ON .. && make install'
          cd ../../
          ldmx run_test
          for c in `ls ldmx-sw/*/test/*.py`; do if ! ldmx fire $c; then exit 1; fi; done
          ldmx python test.py
          ldmx python3 test.py
    -
      name: Push Build to DockerHub
      run: docker push ${{ steps.generate_tag.outputs.tag }}

  # newer version of Geant4
  #     allow for developers to have access to a container with Geant4.10.6 in it
  geant4:
    runs-on: ubuntu-latest
    steps:
    -
      name: Setup QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - 
      name: Cache Docker Layers on GitHub
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      if: ${{ github.event_name != 'pull_request' }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - 
      name: Get Build Context
      uses: actions/checkout@v2
    -
      name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: ${{ github.event_name != 'pull_request' }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        tags: ldmx/dev:geant4.10.6
        build_args: GEANT4=geant4-10.6-release
