
name: Build

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
    branches:
      - '**'
    tags:
      - 'v*.*'

# workflow consists of one building and testing job
jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    -
      name: Setup QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - 
      name: Get Build Context
      uses: actions/checkout@v2
    -
      name: Determine Image Tags
      id: generate_tag
      run: |
          _repo=ldmx/dev
          _tag=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # if pushing a git tag ==> get the git tag for the docker tag
            _tag=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            # pushing to a branch ==> docker tag is branch name
            #   if branch name is default_branch, docker tag is 'edge'
            _tag=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$_tag" ]; then
              _tag=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            # pull request branch ==> docker tag is pr number
            _tag=pr-${{ github.event.number }}
          fi
          _main_tag="${_repo}:${_tag}"
          _push_tags="${_main_tag}"
          if [[ $_tag =~ ^v[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            # latest docker tag is latest version built matching the format v<1-3 digis>.<1-3 digis>
            _push_tags="$_push_tags,${_repo}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # on push actions, tag with sha of GITHUB as well
            _push_tags="$_push_tags,${_repo}:sha-${GITHUB_SHA::8}"
          fi
          echo "Generated Tags: ${_push_tags}"
          echo ::set-output name=push_tags::${_push_tags}
          echo ::set-output name=main_tag::${_main_tag}
    -
      name: Build the Image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: false # don't push to docker hub yet
        load: true # allow image to be availabe to the docker program later in this job
        tags: ${{ steps.generate_tag.outputs.push_tags }}
    -
      name: Determine ldmx-sw Branch to Test
      id: ldmx_sw_branch
      run: |
          _branch=""
          if [ -f ldmx-sw-branch ]; then
              _branch=$(cat ldmx-sw-branch)
          fi
          echo "Test against ldmx-sw/${_branch}"
          echo ::set-output name=branch::${_branch}
    -
      name: Pull down ldmx-sw for testing
      uses: actions/checkout@v2
      with:
        repository: LDMX-Software/ldmx-sw
        submodules: recursive
        path: ldmx-sw
        ref: ${{ steps.ldmx_sw_branch.outputs.branch }}
    - 
      name: Test the Build Image
      run: echo "::warn::Not Testing Image in Development"
#          export LDMX_BASE=$(pwd)
#          export _image_to_test=${{ steps.generate_tag.outputs.main_tag }}
#          export _docker_parameters="-i -e LDMX_BASE -v $LDMX_BASE:$LDMX_BASE $_image_to_test"
#          mkdir ldmx-sw/build
#          docker run $_docker_parameters $(pwd)/ldmx-sw/build 'cmake .. && make install'
#          docker run $_docker_parameters $(pwd) ctest --verbose
#          docker run $_docker_parameters $(pwd) python test.py
#          docker run $_docker_parameters $(pwd) python3 test.py
    -
      name: Push Build to DockerHub
      run: _csv_list=${{ steps.generate_tag.outputs.push_tags }}; for tag in ${_csv_list//,/ }; do docker push $tag; done
      if: ${{ github.event_name != 'pull_request' }}
